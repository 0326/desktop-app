var db = require('db');
var User = require('user');
var Notebook = require('notebook');
var Notes = db.notes;

function log(o) {
	console.log(o);
}

// 笔记服务
var Note = {
	/*
	type NoteOrContent struct {
		NotebookId string
		NoteId string
		UserId string
		Title string
		Desc string
		ImgSrc string
		Tags []string
		Content string
		Abstract string
		IsNew bool
		IsMarkdown bool
		FromUserId string // 为共享而新建
		IsBlog bool // 是否是blog, 更新note不需要修改, 添加note时才有可能用到, 此时需要判断notebook是否设为Blog
	}
	 */
	// 更新笔记
	updateNoteOrContent: function(noteOrContent, callback) {
		var userId = User.getCurActiveUserId();
		noteOrContent['UserId'] = userId;
		log('update');
		var date = new Date();
		noteOrContent.UpdatedTime = date;
		// 新建笔记, IsNew还是保存着
		if(noteOrContent.IsNew) {
			noteOrContent.CreatedTime = date;
			noteOrContent['IsTrash'] = false;
			delete noteOrContent['IsNew'];
			noteOrContent['LocalIsNew'] = true;
			Notes.insert(noteOrContent, function (err, newDoc) {   // Callback is optional
				if(err) {
					console.log(err);
					callback && callback(false);
				} else {
					// 为什么又设置成true, 因为js的对象是共享的, callback用到了noteOrContent.IsNew来做判断
					noteOrContent['IsNew'] = true;
					callback && callback(newDoc);

					// 重新统计笔记本的笔记数量
					Notebook.reCountNotebookNumberNotes(noteOrContent.NotebookId);
				}
			});
		// 更新笔记
		} else {
			var updateFields = ['Desc', 'ImgSrc', 'Title', 'Tags', 'Content'];
			var updates = {};
			var needUpdate = false;
			for(var i in updateFields) {
				var field = updateFields[i];
				if(field in noteOrContent) {
					updates[field] = noteOrContent[field];
					needUpdate = true;
				}
			}
			if(needUpdate) {
				updates.UpdatedTime = date;
				// Set an existing field's value 
				Notes.update({NoteId: noteOrContent.NoteId}, { $set: updates }, {}, function (err, numReplaced) { 
					if(err) {
						log(err);
						callback && callback(false);
					} else {
						callback && callback(noteOrContent);
					}
				});
			}
		}
	},
	// 获取笔记列表
	getNotes: function(notebookId, callback) {
		var me = this;
		me._getNotes(notebookId, false, callback);
	},
	// 获取trash笔记
	getTrashNotes: function(callback) {
		var me = this;
		me._getNotes('', true, callback);
	},
	_getNotes: function(notebookId, isTrash, callback) {
		var userId = User.getCurActiveUserId();
		var query = {
			UserId: userId,
			IsTrash: false,
		};
		if(notebookId) {
			query['NotebookId'] = notebookId;
		}
		if(isTrash) {
			query['IsTrash'] = true;
		}
		Notes.find(query).sort({'UpdatedTime': -1}).exec(function(err, notes) {
			if(err) {
				log(err);
				return callback && callback(false);
			}
			return callback && callback(notes);
		});
	},
};

module.exports = Note;