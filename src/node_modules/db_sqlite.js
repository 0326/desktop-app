var sqlite3 = require('sqlite3');
var path = require('path');
var fs = require('fs');
var Evt = require('evt');

// 数据库初始化
// var dbPath = require('nw.gui').App.dataPath + '/nedb';
// var dbPath = Evt.getBasePath() + '/Users/life/Library/Application Support/Leanote' + '/nedb';
// nedb2 为了port
var dbPath = Evt.getBasePath() + '/sqlite3';
// console.error(dbPath);

// test
if(dbPath.length < 6) {
	var dbPath = '/Users/life/Library/Application Support/Leanote' + '/sqlite3';
}

// console.log(dbPath);
// g, 表全局环境
var dbs = {};
var dbNames = ['notebooks', 'notes', 'users', 'tags', 'images', 'attachs', 'noteHistories', 'g'];
var sqls = {
	'notebooks': {
		'create': `create table %t(
			NotebookId TEXT PRIMARY KEY, 
			ServerNotebookId TEXT, 
			UserId TEXT, 
			ParentNotebookId TEXT, 
			Seq INTEGER, 
			Title TEXT, 
			UrlTitle TEXT, 
			NumberNotes INTEGER, 
			IsTrash INTEGER, 
			IsBlog INTEGER, 
			CreatedTime TEXT, 
			UpdatedTime TEXT, 
			IsDeleted INTEGER, 
			IsDirty INTEGER, 
			LocalIsNew INTEGER
		)`,
		'index': [
			'CREATE INDEX UserId_index ON %t (UserId)', 
			'CREATE INDEX ServerNotebookId_index ON %t (ServerNotebookId)',
			'CREATE INDEX Title_index ON %t(Title)', 
			'CREATE INDEX IsDirty_index ON %t(IsDirty)'
		], 
	},
	// attachs 用json存
	'notes': {
		'create': `create table %t(
			NoteId TEXT PRIMARY KEY,
			NotebookId TEXT,
			UserId TEXT,
			Title TEXT,
			Desc TEXT,
			ImgSrc TEXT,
			Tags TEXT,
			Abstract TEXT,
			Content TEXT,
			IsMarkdown INTEGER, 
			FromUserId TEXT,
			IsBlog INTEGER, 
			IsTrash INTEGER, 
			Usn INTEGER, 
			CreatedTime TEXT,
			UpdatedTime TEXT,
			PublicTime TEXT,
			InitSync INTEGER, 
			IsDirty INTEGER, 
			ServerNoteId TEXT,
			LocalIsDelete INTEGER,
			Star INTEGER,
			LocalIsNew INTEGER,
			Attachs TEXT,
			IsContentDirty INTEGER
		)`, 
		'index': [
			'CREATE INDEX NotebookId_index ON %t (NotebookId)', 
			'CREATE INDEX Title_index ON %t (Title)', 
			'CREATE INDEX UpdatedTime_index ON %t (UpdatedTime)', 
			'CREATE INDEX ServerNoteId_index ON %t (ServerNoteId)', 
			'CREATE INDEX IsDirty_index ON %t (IsDirty)', 
		]
	},
	'tags': {
		'create': `create table %t(
			TagId TEXT PRIMARY KEY,
			Tag TEXT,
			IsDirty INTEGER,
			Usn INTEGER,
			Count INTEGER,
			LocalIsDelete INTEGER,
			CreatedTime TEXT,
			UpdatedTime TEXT
		)`,
		'index': [
		]
	},
	// state 是json
	'users': {
		'create': `create table %t(
			UserId TEXT PRIMARY KEY,
			IsActive INTEGER,
			Ok INTEGER,
			Token TEXT,
			Email TEXT,
			Usn INTEGER,
			Username TEXT,
			Pwd TEXT,
			Host TEXT,
			LastSyncTime TEXT,
			LastSyncUsn INTEGER,
			State TEXT
		)`,
		'index': [
			'CREATE INDEX IsActive_index ON %t (IsActive)'
		]
	},

	'attachs': {
		'create': `create table %t(
			FileId TEXT PRIMARY KEY,
			ServerFileId TEXT,
			UserId TEXT,
			NoteId TEXT,
			Path TEXT,
			Name TEXT,
			Title TEXT,
			IsDirty INTEGER,
			Type TEXT,
			Size INTEGER,
			CreatedTime TEXT
		)`,
		'index': [
		]
	},

	'images': {
		'create': `create table %t(
			FileId TEXT PRIMARY KEY,
			ServerFileId TEXT,
			UserId TEXT,
			NoteId TEXT,
			Path TEXT,
			Name TEXT,
			Title TEXT,
			IsDirty INTEGER,
			Type TEXT,
			Size INTEGER,
			CreatedTime TEXT
		)`,
		'index': [
		]
	},

	'noteHistories': {
		'create': `create table %t(
			HistoryId TEXT PRIMARY KEY,
			NoteId TEXT,
			Content TEXT,
			UpdatedTime TEXT
		)`,
		'index': [
			'CREATE INDEX NoteId_index ON %t (NoteId)',
			'CREATE INDEX UpdatedTime_index ON %t (UpdatedTime)'
		]
	},

	// g必须吗 ?

}
for(var i in dbNames) {
	var name = dbNames[i];
	var tablePath = path.join(dbPath, name + '.db');

	if(!fs.existsSync(tablePath)) {
		var db = new sqlite3.Database(tablePath);
		var sql = sqls[name];
		if(!sql) {
			return;
		}

		db.serialize(function() {
			var cmds = [sql.create].concat(sql.index);
			for(var i = 0; i < cmds.length; ++i) {
				var cmd = cmds[i].replace('%t', name);
				console.log('run cmd');
				console.log(cmd);
				db.run(cmd);
			}
		});

		dbs.'_' + name = db;
	}
}

// 每一种

var nedb2Sqlite = {
	/*
	Notes.insert(noteOrContent, function (err, newDoc) { 
	},

	Notes.update(
			{UserId: userId, IsTrash: true}, 
			{$set: {LocalIsDelete: true, IsDirty: true}}, 
			{multi: true}, 
			function(err, n) {
				// Web.alertWeb(n);
				callback && callback();
		});

	Notes.update({NoteId: noteOrContent.NoteId}, { $set: updates }, {}, function (err, numReplaced) { 
						if(err) {

	Notes.find(query).sort({'UpdatedTime': -1}).exec(function(err, notes) {
			if(err) {
				log(err);
				return callback && callback(false);
			}
			return callback && callback(notes);
		});

	Notes.count({NotebookId: notebookId, IsTrash: false, LocalIsDelete: false}, function(err, n) {
			console.log(n);
			if(err || n > 0) {
				return callback(true);
			}
			callback(false);
		});

	Notes.findOne({NoteId: noteId}, function(err, doc) {
			if(err || !doc) {
				log('不存在');
				callback && callback(false);
			} else {
				callback && callback(doc);
			}
		});


	Notes.remove({_id: note._id}, function(err, n) {
		if(err) { 
			callback && callback(false);
		} else {
			Notebook.reCountNotebookNumberNotes(note.NotebookId);
			callback && callback(true);
		}
	});
	*/

	// 插入
	insert: function(dbname, data, callback) {
		var me = this;
		var _db = dbs[dbname];
		var fields = [];
		var values = [];
		var valuesToken = [];
		for(var field in data) {
			var value = data[field];

			value = me.fixValue(field, value);

			fields.push(field);
			values.push(value);
			valuesToken.push('?');
		}
		_db.run('INSERT INTO ' + dbname + ' (' + fields.join(',') +') VALUES (' + valuesToken.join(',') + ')', values, function(err) {
			callback && callback(err, data);
		});
	},

	// todo
	// query = {$in: [], Tags: {$in: [title]}};
	_where: function(query) {
		// 返回字符串
		var where = [];
		for(var field in query) {
			var value = query[field];
			if(typeof value == 'boolean') {
				value = value ? 1 : 0;
			}
			else if(typeof value == 'string') {
				where.push(field + '="' + v + '" ');
			}
			// 如果是日期 
			else if(value instanceof Date) {

			}	
			// 对象类型
			else {
				if(field == 'Tags' && value['$in'] && value['$in'].length > 0) {
					where.push(field + ' "LIKE %' + value['$in'][0] + '%" ');
				}
				// $gt ?
				else {

				}
			}
		}
		return where.join('AND');
	},

	// 修复值为bool, Tags, Date, json
	fixValue: function(key, value) {
		// bool
		if(typeof value == 'boolean') {
			value = value ? 1 : 0;
		}
		else if(typeof value == 'object') {
			// Tgas
			if(field == 'Tags') {
				value = value.join(',');
			}
			// 日期
			else if(value instanceof Date) {
				value = value.getTime();
			}
			// json
			else {
				value = JSON.stringify(value);
			}
		}
		return value;
	},

	// update set
	_set: function(data) {
		var me = this;
		data = data['$set'];
		// 返回字符串
		var set = [];
		for(var i in data) {
			var value = data[i];

			value = me.fixValue(i, value);

			set.push(i + '="' + value + '"');
		}
		return set.join(',');
	},

	// 更新
	update: function(dbname, query, set, option, callback) {
		var me = this;
		var _db = dbs[dbname];

		var where = me._where(query);
		var set = me._set(set);

		var sql = 'UPDATE tbl SET ' + set;
		if(where) {
			sql += ' WHERE ' + where;
		}

		if(typeof option == 'function') {
			callback = option;
		}

		_db.run(sql, function(err) {
			callback && callback(err, err ? 0 : 1);
		});
	},

	/*
	Notes.find(query).sort({'UpdatedTime': -1}).exec(function(err, notes) {
			if(err) {
				log(err);
				return callback && callback(false);
			}
			return callback && callback(notes);
		});
	 */
	_find: (function() {
		var me = this;
		function F(dbname, query, callback) {
			this.query = query;
			this.callback = callback;

			if(callback) {
				this.exec(callback);
			}
		}
		// limit 15 offset 20 跳过20条记录选出15条记录
		F.prototype.limit = function(limit, offset) {
			this.limitQ = limit;
			this.offset = offset;
		}
		F.prototype.sort = function(sort) {
			this.sortQ = sort;
		}
		F.prototype.exec = function(callback) {
			if(callback) {
				this.callback = callback;
			}
			var where = me._where(query);

			// select * from dbname where xxxx order by title desc, createdTime asc
			var _db = dbs[this.dbname];

			var sql = 'select * from ' + this.dbname;
			if (where) { 
				sql += ' where ' + where;
			}

			if(this.sortQ) {
				var sortArr = [];
				for(var i in this.sortQ) {
					var sortType = this.sortQ[i] < 0 ? 'DESC' : 'ASC';
					sortArr.push(i + ' ' + sortType + ' ');
				}

				sql += ' sort by ' + sortArr.join(', ');
			}

			if(this.limitQ) {
				sql += ' limit ' + this.limitQ;
			}
			if(this.offset) {
				sql +=' offset ' + this.offset;
			}

			_db.all(sql, function(err, rows) {
				this.callback && this.callback(err, rows);
			});
		}
		return F;
	})(),

	// 查找
	find: function(dbname, query, callback) {
		return new this._find(dbname, query, callback);
	},
	findOne: function(dbname, query, callback) {
		var q = new this._find(dbname, query);
		q.limit(1).exec(callback);
	},
	// TODO
	count: function(dbname, query, callback) {
		var sql = 'select count(*) from ' + dbname;
		var where = this._where(query);
		if(where) {
			sql += ' where ' + where;
		}
		dbs[dbname].all(sql, function(err, rows) {

		})
	},

	/*
	Notes.remove({_id: note._id}, function(err, n) {
		if(err) { 
			callback && callback(false);
		} else {
			Notebook.reCountNotebookNumberNotes(note.NotebookId);
			callback && callback(true);
		}
	});
	*/
	remove: function(dbname, query, callback) {
		var sql = 'delete from ' + dbname;
		var where = this._where(query);
		if(where){ 
			sql += ' where ' + where;
		}
		db.run(sql, function(err) {
			callback && callback(err, err ? 0 : 1);
		});
	}
};



module.exports = dbs; 
console.log('sqlite3 db inited');